import { MOVIE_LIST } from "../utils/movies";

import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";

import Alert from "@mui/material/Alert";
import Button from "@mui/material/Button";
import Container from "@mui/material/Container";
import Grid from "@mui/material/Grid";
import TextField from "@mui/material/TextField";
import Typography from "@mui/material/Typography";

import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemText from "@mui/material/ListItemText";

import { useState } from "react";

export default function Home() {
  const [search, setSearch] = useState("");
  const [year, setYear] = useState("");
  const [errorMessage, setErrorMessage] = useState("");

  const [movies, setMovies] = useState(MOVIE_LIST);

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log(search);
    console.log(year);
    validateYearInput();
    filterMovies();
  };

  const isNumber = (value) => {
    return !isNaN(value);
  };

  const validateYearInput = () => {
    // If year is empty that is valid
    if (year.trim() === "") {
      setErrorMessage("");
      return;
    }

    // If year is not a number or year is not 4 digits that is invalid
    if (!isNumber(year) || year.trim().length !== 4) {
      setErrorMessage(`${year} is not a valid year`);
      return;
    }

    // If we get here it is valid
    setErrorMessage("");
  };

  const filterMovies = () => {
    // initialize new movies list
    const filteredMovies = [...MOVIE_LIST];

    // If search is not empty
    if (search.trim().length > 0) {
      // Filter by search
      filteredMovies = filteredMovies.filter((movie) => {
        return movie.name.toLowerCase().includes(search.trim().toLowerCase());
      });
    }

    // If year is not empty
    if (year.trim() !== "") {
      // Filter by year
      filteredMovies = filteredMovies.filter((movie) => {
        return movie.year === parseInt(year);
      });
    }
    // Set movies state
    setMovies(filteredMovies);
  };

  return (
    <div>
      <Head>
        <title>Our Movie App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>

      <main>
        <Container>
          <Typography
            variant="h2"
            component="h2"
            style={{ textAlign: "center" }}
          >
            Movies
          </Typography>
          <form style={{ width: "100%" }} onSubmit={handleSubmit}>
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <TextField
                  id="search-field"
                  label="search..."
                  variant="standard"
                  sx={{ width: "100%" }}
                  onChange={(event) => {
                    // set the search state
                    setSearch(event.target.value);
                  }}
                  value={search}
                />
              </Grid>
              <Grid item xs={4}>
                <TextField
                  id="year-field"
                  label="year"
                  variant="standard"
                  sx={{ width: "100%" }}
                  onChange={(event) => {
                    // set the search state
                    setYear(event.target.value);
                  }}
                  value={year}
                />
              </Grid>
              <Grid item xs={2}>
                <Button type="submit" variant="contained">
                  Filter
                </Button>
              </Grid>
              <Grid item xs={10}>
                {/* Add the error message here*/}
              </Grid>
            </Grid>
          </form>
          {errorMessage.trim().length > 0 && (
            <Alert severity="error">{errorMessage}</Alert>
          )}
          <List sx={{ width: `100%` }}>
            {movies.length === 0 ? (
              <ListItem>
                <Typography>No Results Found</Typography>
              </ListItem>
            ) : (
              <ListItem>
                <Typography>
                  {movies.length} Result{movies.length > 1 && "s"} Found
                </Typography>
              </ListItem>
            )}
            {movies.map((movieData, index) => {
              return (
                <ListItem key={index}>
                  <ListItemText>
                    <Typography variant="p" component="div">
                      {movieData.name} ({movieData.year})
                    </Typography>
                  </ListItemText>
                </ListItem>
              );
            })}
          </List>
        </Container>
      </main>
    </div>
  );
}
